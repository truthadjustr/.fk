
# bootstrap
export FKLOGDIR=/tmp/fk
mkdir -p $FKLOGDIR

fk_init() {
    mkdir -p ~/.fk/ 
    cd ~/.fk/
    [ ! -e shell-functools/ ] && \
        git clone ssh://git@github.com/truthadjustr/shell-functools.git
    cd -
    MUSTHAVES='jq xmlstarlet'
    for x in $MUSTHAVES;do 
        if ! type $x >/dev/null 2>&1;then
            echo "missing $x"
        fi
    done
}

fk_enablef() {
    if [ ! -d ~/.fk/shell-functools/ft ];then
      cd ~/.fk/
      git clone ssh://git@github.com/truthadjustr/shell-functools.git
      cd -
    fi 
    export PATH=~/.fk/shell-functools/ft:$PATH 
}

#####################
# Elasticsearch stuff
#####################

fk_es_cat() {
    [ $# -eq 0 ] && return 0
    local ES=$1
    if [ -n "$a" ];then
python3 - <<END
import os,sys
sys.path.append(os.getenv('HOME') + '/.fk/')
import es_funcs
es_funcs.get_indices(host="$ES")
END
    else
        curl -s "http://$ES:9200/_cat/indices?v&pretty" | tee $FKLOGDIR/es_cat.$ES.$(date +'%H')
    fi
}

fk_es_search() {
    [ $# -ne 2 ] && return 0
    local ES=$1
    local INDEX=$2
    if [ -n "$a" ];then
python3 - <<END
import os,sys
sys.path.append(os.getenv('HOME') + '/.fk/')
import es_funcs
es_funcs.get_docs("$INDEX",host = $ES)
END
    else
        curl -s "http://$ES:9200/$INDEX/_search?pretty" | tee $FKLOGDIR/es_search.$INDEX.$(date +'%H')
    fi
}

fk_es_delete() {
    [ $# -ne 2 ] && return 0
    local ES=$1
    local INDEX=$2
    curl -s -XDELETE "http://$ES:9200/$INDEX"
}

############
# JSON stuff
############

fk_es_json_vi() {
    [ $# -eq 0 ] && return 1
    local auto=0
    local n=$(jq '.hits.hits|length' $1)
    for((i=0;i<n;i++));do
        jq ".hits.hits[$i]" $1 
        echo "------"
        if ((auto == 0));then
            read -p "next? [Y/n/a]" yesno
            [ "$yesno" = "n" ] && break 
        fi
        if [ "$yesno" = "a" ];then
            auto=1
            sleep 3
        fi
    done
}

#############
# C/C++ stuff
#############

# A function to feel the use of certain Windows APIs
feel () { 
    local DIR=${1:-.}
    find $DIR \( -name '*.git*' -o -name '*node_modules*' \) -prune -o -type f -exec basename {} \; | while read x; do
        echo ${x##*.}
    done | sort | uniq -ic | sort -rn
    echo "-----------------------------------------";
    echo */
    echo "-----------------------------------------";
    declare -A usecount
    local APIS=($(<~/.fk/winapi.lst))
    local api c f
    while read f; do
        for api in ${APIS[@]};
        do
            c=$(grep -w -c $api $f)
            if ((c>0)); then
                usecount[$api]=$((usecount[$api] + c))
            fi
        done
    done < <(find $DIR -type f \( -name '*.h' -o -name '*.cpp' -o -name '*.c' \))
    for api in ${!usecount[@]}
    do
        echo "$api = ${usecount[$api]}"
    done
}

###########
# xml stuff
###########

# XML rough analyses: count how many elements and the
# attributes count of each element
xml_elcount() {
    [ $# -eq 0 ] && return 1

    local TMP0=$(mktemp)
    local TMP2=$(mktemp)
    local TMP3=$(mktemp)
    local TMP4=$(mktemp)
    local XML=$1
    local count x
    xml el -u $XML > $TMP0
    while read x;do
        xml sel -t -v "count(//$x)" -n $XML >> $TMP2
        xml sel -t -m "//$x/@*" -v "name()" -n $XML | sort -u > $TMP4
        count=$(wc -l < $TMP4)
        if ((count == 0));then
            echo >> $TMP3
        else
            if ((count <= 10));then
                attrs=$(tr '\n' ',' < $TMP4) 
                echo "@:$count:${attrs%?}" >> $TMP3
            else
                echo "@:$count:*" >> $TMP3
            fi
        fi
    done < $TMP0

    paste $TMP0 $TMP2 $TMP3 | column -s $'\t' -t
    rm -f $TMP0 $TMP2 $TMP3 $TMP4
}

###########
# git stuff
###########
git_lsdiff () { 
    hr=${1:-HEAD}
    IFS=$'\r\n'
    git diff --name-status $hr^ $hr | tee /tmp/lsdiff.lst | nl -v0
    aa=($(cut -f2 /tmp/lsdiff.lst))
}

git_filediff () { 
    [ $# -ne 1 ] && return 1
    local LSDIFF=/tmp/lsdiff.lst
    local f=$1
    local h=$hr
    git diff -w $h^:$f $h:$f
}

git_log () { 
    git log --pretty=format:"%h%x09%ad%x09%an%x09%s" --date=format:'%Y-%m-%d %H:%M:%S' | tee /tmp/git.log | less
}
