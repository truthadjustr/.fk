
# bootstrap
export fklogdir=/tmp/fk
export fkhomedir=~/.fk
mkdir -p $fklogdir

fk_init() {
    mkdir -p ~/.fk/ 
    cd ~/.fk/
    [ ! -e shell-functools/ ] && \
        git clone ssh://git@github.com/truthadjustr/shell-functools.git
    cd -
    musthaves='jq xmlstarlet nc ctags'
    for x in $musthaves;do 
        if ! type $x >/dev/null 2>&1;then
            echo "missing $x"
        fi
    done
}

fk_enablef() {
    if [ ! -d ~/.fk/shell-functools/ft ];then
      cd ~/.fk/
      git clone ssh://git@github.com/truthadjustr/shell-functools.git
      cd -
    fi 
    export PATH=~/.fk/shell-functools/ft:$PATH 
}

#####################
# Elasticsearch stuff
#####################

fk_es_cat() {
    [ $# -eq 0 ] && return 0
    local es=$1
    if [ -n "$a" ];then
python3 - <<HEREDOC
import os,sys
sys.path.append(os.getenv('HOME') + '/.fk/')
import es_funcs
es_funcs.get_indices(host="$es")
HEREDOC
    else
        curl -s "http://$es:9200/_cat/indices?v&pretty" | tee $fklogdir/es_cat.$es.$(date +'%H')
    fi
}

fk_es_search() {
    [ $# -ne 2 ] && return 0
    local es=$1
    local index=$2
    if [ -n "$a" ];then
python3 - <<HEREDOC
import os,sys
sys.path.append(os.getenv('HOME') + '/.fk/')
import es_funcs
es_funcs.get_docs("$index",host = $es)
HEREDOC
    else
        curl -s "http://$es:9200/$index/_search?pretty" | tee $fklogdir/es_search.$index.$(date +'%H')
    fi
}

fk_es_delete() {
    [ $# -ne 2 ] && return 0
    local es=$1
    local index=$2
    curl -s -XDELETE "http://$es:9200/$index"
}

############
# JSON stuff
############

fk_es_json_vi() {
    [ $# -eq 0 ] && return 1
    local auto=0
    local n=$(jq '.hits.hits|length' $1)
    for((i=0;i<n;i++));do
        jq ".hits.hits[$i]" $1 
        echo "------"
        if ((auto == 0));then
            read -p "next? [Y/n/a]" yesno
            [ "$yesno" = "n" ] && break 
        fi
        if [ "$yesno" = "a" ];then
            auto=1
            sleep 3
        fi
    done
}

#############
# C/C++ stuff
#############

fiex=(\( -name ".git" -o \
-name "node_modules" -o \
-iname "stlport*" -o \
-iname "cppunit*" -o \
-iname "openssl" -o \
-name "gmock" -o \
-name "gtest" -o \
-name "zlibsdk" -o \
-iname "nt-vs*" -o \
-iname "ce-x86*" -o \
-name "ARM" -o \
-name "SHx" -o \
-name Debug -o \
-name tags -o \
-name cscope.out -o \
-name Release \
\) -prune -o)
#declare -p fiex

# A function to feel the use of certain Windows APIs
feel () { 
    local target=${1:-.}
    declare -A usecount
    local apis=($(<~/.fk/winapi.lst))
    local api c f idx
    if [ -d $target ];then
        find $target "${fiex[@]}" -type f -exec basename {} \; | while read x; do
            # get the file's extension, as info for the feel
            echo ${x##*.}
        done | sort | uniq -ic | sort -rn | tee /tmp/feel.out
        echo "-----------------------------------------" | tee -a /tmp/feel.out
        echo $target/*/ | tee -a /tmp/feel.out
        echo "-----------------------------------------" | tee -a /tmp/feel.out

        while read f; do
            [ -d $f ] && continue
            for api in ${apis[@]};
            do
                c=$(grep -w -c $api $f)
                if ((c>0)); then
                    usecount[$api]=$((usecount[$api] + c))
                fi
            done
        done < <(find $target "${fiex[@]}" -type f \( -name '*.h' -o -name '*.cpp' -o -name '*.c' \) -print)
    else
        for api in ${apis[@]};
        do
            c=$(grep -w -c $api $target)
            if ((c>0)); then
                usecount[$api]=$((usecount[$api] + c))
            fi
        done
    fi

    idx=0
    for api in ${!usecount[@]}
    do
        #idx=$((idx+1))
        #((idx%5 == 0)) && sep='\n' || sep=', '
        #str="$api = ${usecount[$api]}"
        #printf "$str%b" $sep 
        printf "$api = ${usecount[$api]}\n"
    done | tee -a /tmp/feel.out
}

cpp_i() {
    [ $# -eq 0 ] && return 1
    local ifile=$1
    #ctags -x --c++-kinds=f --language-force=c++ $ifile
    grep -n -o -E '[[:alpha:]]+[[:alnum:]]*[[:space:]]*::[[:space:]]*[[:alpha:]]+[[:alnum:]]*[[:space:]]*\(' $ifile
}

crossref() {
	#local target=${1:-.}
	local tmpFile=$(mktemp)
	#cd $target
	rm -f cscope.* tags
	find $* "${fiex[@]}" -type f -print \
        \( -name "*.h" -o -name "*.cpp" -o -name "*.c" \) > $tmpFile

    ctags -L $tmpFile
	#cscope -Rb -i $tmpFile
	#cd -
	rm -f $tmpFile
}

tagf() {
    local flags=fpvxcmdst
    if [ $# -eq 0 ];then
        rm -f tags
        find . "${fiex[@]}" -type f \( -name '*.h' -o -name '*.cpp' -o -name '*.c' \) \
            -exec ctags --append=yes --c++-kinds=$flags --language-force=c++ --fields=+iaS --extra=+q {} \;
    else
        ctags --append=yes --c++-kinds=$flags --language-force=c++ --extra=+q --fields=+iaS $*
    fi
}

query() {
    if [ $# -ne 2 ];then
        echo "query file.cpp c|d|e|f|g|l|m|n|p|s|t|u|v|x"
		echo "where:"
		cat<<HEREDOC	
###########
# Where \$2:
# c  classes --------------------------------------------> class
# d  macro definitions ----------------------------------> macro
# e  enumerators (values inside an enumeration) ---------> enumerator
# f  function definitions -------------------------------> function
# g  enumeration names ----------------------------------> enum
# l  local variables [off] ------------------------------> local
# m  class, struct, and union members -------------------> member
# n  namespaces -----------------------------------------> namespace
# p  function prototypes [off] --------------------------> prototype
# s  structure names ------------------------------------> struct
# t  typedefs -------------------------------------------> typedef
# u  union names ----------------------------------------> union
# v  variable definitions -------------------------------> variable
# x external and forward variable declarations [off] ----> externvar
HEREDOC
        return 0
    fi
    local ifile=$1
    local flags=$2
    
    ctags -x --c++-kinds=$flags --language-force=c++ --extra=q $ifile | ~/.fk/ctags.awk 
    local wce=$(grep -w _WIN32_WCE $ifile | wc -l)
    if((wce > 0));then
        echo "**********************"
        echo "*** _WIN32_WCE = $wce ***"
        echo "**********************"
    fi
}

searchobjdef() {
    [ $# -lt 2 ] && return 1
    local searchdir=${3:-.}
    local type=$1
    local object=$2
    find $searchdir "${fiex[@]}" -type f \( -name '*.h' -o -name '*.cpp' \) \
        -exec sh -c "ctags -x --c++-kinds=$type --language-force=c++ '{}' \
        | sed 's/ \+/ /g' | grep -w $object" \;
}

lsinclude () { 
    if [ $# -eq 0 ];then
        for f in *.h *.cpp; do
            [ -r $f ] && grep -E '#[[:space:]]*include' $f
        done | sort | uniq -ic | sort -rn
    else
        grep -R -E '#[[:space:]]*include' $1 | sort | uniq -ic | sort -rn
    fi
}

###########
# xml stuff
###########

alias xmlms='xmlstarlet sel -N x="http://schemas.microsoft.com/developer/msbuild/2003"'

# XML rough analyses: count how many elements and the
# attributes count of each element
xml_elcount() {
    [ $# -eq 0 ] && return 1

    local tmp0=$(mktemp)
    local tmp2=$(mktemp)
    local tmp3=$(mktemp)
    local tmp4=$(mktemp)
    local xml=$1
    local count x
    xmlstarlet el -u $xml > $tmp0
    while read x;do
        xmlstarlet sel -t -v "count(//$x)" -n $xml >> $tmp2
        xmlstarlet sel -t -m "//$x/@*" -v "name()" -n $xml | sort -u > $tmp4
        count=$(wc -l < $tmp4)
        if ((count == 0));then
            echo >> $tmp3
        else
            if ((count <= 10));then
                attrs=$(tr '\n' ',' < $tmp4) 
                echo "@:$count:${attrs%?}" >> $tmp3
            else
                echo "@:$count:*" >> $tmp3
            fi
        fi
    done < $tmp0

    paste $tmp0 $tmp2 $tmp3 | column -s $'\t' -t
    rm -f $tmp0 $tmp2 $tmp3 $tmp4
}

###########
# git stuff
###########
git_lsdiff () { 
    hr=${1:-HEAD}
    IFS=$'\r\n'
    git diff --name-status $hr^ $hr | tee /tmp/lsdiff.lst | nl -v0
    aa=($(cut -f2 /tmp/lsdiff.lst))
}

git_filediff () { 
    [ $# -ne 1 ] && return 1
    local lsdiff=/tmp/lsdiff.lst
    local f=$1
    local h=$hr
    git diff -w $h^:$f $h:$f
}

git_log () { 
    git log --pretty=format:"%h%x09%ad%x09%an%x09%s" --date=format:'%Y-%m-%d %H:%M:%S' | tee /tmp/git.log | less
}

gitlab_repo_delete () { 
    [ $# -eq 0 ] && return 1;
    local username=$ident;
    local token=$gitlab_token;
    local repo_name=$1;
    curl -H 'Content-Type: application/json' -H "Private-Token: $token" -X DELETE https://gitlab.com/api/v4/projects/$username%2F$repo_name
}

gitlab_repo_init () { 
    [ $# -eq 0 ] && return 1;
    local repo_name=$1;
    local username=$ident;
    local token=$gitlab_token;
    curl -H "Content-Type:application/json" https://gitlab.com/api/v4/projects?private_token=$token -d "{ \"name\": \"$repo_name\" }";
    if [ $? -eq 0 ]; then
        git init;
        git add .;
        git commit -m "first commit";
        git remote add origin git@gitlab.com:${username}/${repo_name}.git;
        git push -u origin master;
    else
        echo "CANNOT CREATE GITLAB REPO $repo_name";
    fi
}

github_repo_delete () { 
    [ $# -eq 0 ] && return 1;
    local username=$ident;
    local token=$github_delete_token;
    local repo_name=$1;
    curl -u "$username:$token" -X DELETE https://api.github.com/repos/$username/$repo_name
}

github_repo_init () { 
    [ $# -eq 0 ] && return 1;
    local repo_name=$1;
    local username=$ident;
    local token=$github_create_token;
    git init;
    git add .;
    git commit -m "first commit";
    if curl -u "$username:$token" https://api.github.com/user/repos -d '{"name":"'$repo_name'"}'; then
        git remote add origin https://github.com/${username}/${repo_name}.git;
        git remote set-url origin git+ssh://git@github.com/${username}/${repo_name}.git;
        git push origin master;
    else
        echo "CANNOT CREATE GITHUB REPO $repo_name";
    fi
}

gitmerge_lsdiff() {
    local tmp0=$(mktemp)
    git log --pretty=format:"%h" > $tmp0
    local headhash=$(sed -n 1p $tmp0)
    hr1=${1:-$headhash}
    hr0=$(git log --pretty=format:"%h" | sed -n "/${hr1}/{h;n;p}")
    if [ -n "$hr0" ]; then
        git diff --name-status $hr0..$hr1 | nl -v0 | tee /tmp/lastdiff | less
    else
        echo "There is no previous of $hr1"
    fi
    aaa=($(cut -f3 /tmp/lastdiff))
    rm -f $tmp0
}

gitmerge_filediff() {
    [ $# -ne 1 ] && return 1
    if [ -z "$hr0" ] || [ -z "$hr1" ];then
        echo "no reference commit hash"
        return 2
    fi
    local f=$1
    git diff -w $hr0..$hr1 $f
}

#############
# shell stuff
#############
alias od='od -w32 --endian=big -t x1z'

maxf() {
    [ $# -eq 0 ] && return 1
    local ifile=$1
    awk '{if(NF>max){max=NF;t=$1}} END{print max,t}' $ifile
}

chr () { 
    [ "$1" -lt 256 ] || return 1;
    printf "\\$(printf '%03o' "$1")"
}

ord () { 
    LC_CTYPE=C printf '%d' "'$1"
}

checkports () { 
    [ $# -lt 2 ] && return;
    local ipaddr=$1;
    shift;
    local ports="$*";
    for p in $ports;
    do
        printf "$p ";
        nc -w 5 -z $ipaddr $p && echo "open" || echo "close";
    done
}

syncheck() {
    declare -A fileMap
    inotifywait --exclude .swp --format '%w%f' -e modify,create -m -r -q $* | \
    while read FILE; do   
        #es=$(date +'%s.%N')
        es=$(date +'%s')
        case "$FILE" in
        *.hs)
        if [[ ${fileMap[$FILE]} != $es ]];then
            sdiff=$(($es-${fileMap[$FILE]:-0}))
            fileMap[$FILE]=$es
            ((sdiff < 3)) && continue
            ghc -fno-code $FILE
            echo "--------------------[$FILE $?]--------------------------"
        fi
        ;;

        *.cpp)
        if [[ ${fileMap[$FILE]} != $es ]];then
            sdiff=$(($es-${fileMap[$FILE]:-0}))
            fileMap[$FILE]=$es
            ((sdiff < 3)) && continue
            g++ -c $FILE
            echo "--------------------[$FILE $?]--------------------------"
        fi
        ;;

        *.c)
        if [[ ${fileMap[$FILE]} != $es ]];then
            sdiff=$(($es-${fileMap[$FILE]:-0}))
            fileMap[$FILE]=$es
            ((sdiff < 3)) && continue
            gcc -c $FILE
            echo "--------------------[$FILE $?]--------------------------"
        fi
        ;;

        *.py)
        if [[ ${fileMap[$FILE]} != $es ]];then
            sdiff=$(($es-${fileMap[$FILE]:-0}))
            fileMap[$FILE]=$es
            ((sdiff < 3)) && continue
            python3 -m py_compile $FILE
            echo "--------------------[$FILE $?]--------------------------"
        fi
        ;;
        esac
    done
}
