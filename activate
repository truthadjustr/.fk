
# bootstrap
export FKLOGDIR=/tmp/fk
mkdir -p $FKLOGDIR

fk_init() {
    mkdir -p ~/.fk/ 
    cd ~/.fk/
    [ ! -e shell-functools/ ] && \
        git clone ssh://git@github.com/truthadjustr/shell-functools.git
    cd -
    MUSTHAVES='jq xmlstarlet'
    for x in $MUSTHAVES;do 
        if ! type $x >/dev/null 2>&1;then
            echo "missing $x"
        fi
    done
}

fk_enablef() {
    if [ ! -d ~/.fk/shell-functools/ft ];then
      cd ~/.fk/
      git clone ssh://git@github.com/truthadjustr/shell-functools.git
      cd -
    fi 
    export PATH=~/.fk/shell-functools/ft:$PATH 
}

#####################
# Elasticsearch stuff
#####################

fk_es_cat() {
    [ $# -eq 0 ] && return 0
    local ES=$1
    if [ -n "$a" ];then
python3 - <<END
import os,sys
sys.path.append(os.getenv('HOME') + '/.fk/')
import es_funcs
es_funcs.get_indices(host="$ES")
END
    else
        curl -s "http://$ES:9200/_cat/indices?v&pretty" | tee $FKLOGDIR/es_cat.$ES.$(date +'%H')
    fi
}

fk_es_search() {
    [ $# -ne 2 ] && return 0
    local ES=$1
    local INDEX=$2
    if [ -n "$a" ];then
python3 - <<END
import os,sys
sys.path.append(os.getenv('HOME') + '/.fk/')
import es_funcs
es_funcs.get_docs("$INDEX",host = $ES)
END
    else
        curl -s "http://$ES:9200/$INDEX/_search?pretty" | tee $FKLOGDIR/es_search.$INDEX.$(date +'%H')
    fi
}

fk_es_delete() {
    [ $# -ne 2 ] && return 0
    local ES=$1
    local INDEX=$2
    curl -s -XDELETE "http://$ES:9200/$INDEX"
}

############
# JSON stuff
############

fk_es_json_vi() {
    [ $# -eq 0 ] && return 1
    local auto=0
    local n=$(jq '.hits.hits|length' $1)
    for((i=0;i<n;i++));do
        jq ".hits.hits[$i]" $1 
        echo "------"
        if ((auto == 0));then
            read -p "next? [Y/n/a]" yesno
            [ "$yesno" = "n" ] && break 
        fi
        if [ "$yesno" = "a" ];then
            auto=1
            sleep 3
        fi
    done
}

#############
# C/C++ stuff
#############

# A function to feel the use of certain Windows APIs
feel () { 
    local TARGET=${1:-.}
    declare -A usecount
    local APIS=($(<~/.fk/winapi.lst))
    local api c f idx

    if [ -d $TARGET ];then
        find $TARGET \( -name '*.git*' -o -name '*node_modules*' \) -prune -o -type f -exec basename {} \; | while read x; do
            echo ${x##*.}
        done | sort | uniq -ic | sort -rn | tee /tmp/feel.out
        echo "-----------------------------------------" | tee -a /tmp/feel.out
        echo */ | tee -a /tmp/feel.out
        echo "-----------------------------------------" | tee -a /tmp/feel.out

        while read f; do
            for api in ${APIS[@]};
            do
                c=$(grep -w -c $api $f)
                if ((c>0)); then
                    usecount[$api]=$((usecount[$api] + c))
                fi
            done
        done < <(find $TARGET -type f \( -name '*.h' -o -name '*.cpp' -o -name '*.c' \))
    else
        for api in ${APIS[@]};
        do
            c=$(grep -w -c $api $TARGET)
            if ((c>0)); then
                usecount[$api]=$((usecount[$api] + c))
            fi
        done
    fi

    idx=0
    for api in ${!usecount[@]}
    do
        #idx=$((idx+1))
        #((idx%5 == 0)) && sep='\n' || sep=', '
        #str="$api = ${usecount[$api]}"
        #printf "$str%b" $sep 
        printf "$api = ${usecount[$api]}\n"
    done | tee -a /tmp/feel.out
}

cpp_i() {
    [ $# -eq 0 ] && return 1
    local F=$1
    #ctags -x --c++-kinds=f --language-force=c++ $F
    grep -n -o -E '[[:alpha:]]+[[:alnum:]]*[[:space:]]*::[[:space:]]*[[:alpha:]]+[[:alnum:]]*[[:space:]]*\(' $F
}

crossref() {
	local TARGET=${1:-.}
	local tmpFile=$(mktemp)
	cd $TARGET
	find . -type f \
        -a \( -name "*.h" -o -name "*.cpp" -o -name "*.c" -o -name "*.cc" -o -name "*.pc" \) > $tmpFile

	rm -f cscope.* tags
	ctags -I "__THROW __nonnull __attribute_pure__ __attribute__ G_GNUC_PRINTF+" \
        --file-scope=yes --c++-kinds=+px --c-kinds=+px --fields=+iaS -Ra --extra=+fq \
        --langmap=c:.c.h.pc.ec --languages=c,c++ --links=yes -f tags -L $tmpFile

	cscope -Rb -i $tmpFile
	cd -
	rm -f $tmpFile
}

see() {
    if [ $# -ne 2 ];then
        echo "see file.cpp c|d|e|f|g|l|m|n|p|s|t|u|v|x"
		echo "where:"
		cat<<HEREDOC	
c  classes
d  macro definitions
e  enumerators (values inside an enumeration)
f  function definitions
g  enumeration names
l  local variables [off]
m  class, struct, and union members
n  namespaces
p  function prototypes [off]
s  structure names
t  typedefs
u  union names
v  variable definitions
x external and forward variable declarations [off]
HEREDOC
        return 0
    fi
    local F=$1
    local G=$2
    ctags -x --c++-kinds=$G --language-force=c++ --extra=q $F \
        | sort | awk '!seen[$3]++'
}

###########
# xml stuff
###########

# XML rough analyses: count how many elements and the
# attributes count of each element
xml_elcount() {
    [ $# -eq 0 ] && return 1

    local TMP0=$(mktemp)
    local TMP2=$(mktemp)
    local TMP3=$(mktemp)
    local TMP4=$(mktemp)
    local XML=$1
    local count x
    xmlstarlet el -u $XML > $TMP0
    while read x;do
        xmlstarlet sel -t -v "count(//$x)" -n $XML >> $TMP2
        xmlstarlet sel -t -m "//$x/@*" -v "name()" -n $XML | sort -u > $TMP4
        count=$(wc -l < $TMP4)
        if ((count == 0));then
            echo >> $TMP3
        else
            if ((count <= 10));then
                attrs=$(tr '\n' ',' < $TMP4) 
                echo "@:$count:${attrs%?}" >> $TMP3
            else
                echo "@:$count:*" >> $TMP3
            fi
        fi
    done < $TMP0

    paste $TMP0 $TMP2 $TMP3 | column -s $'\t' -t
    rm -f $TMP0 $TMP2 $TMP3 $TMP4
}

###########
# git stuff
###########
git_lsdiff () { 
    hr=${1:-HEAD}
    IFS=$'\r\n'
    git diff --name-status $hr^ $hr | tee /tmp/lsdiff.lst | nl -v0
    aa=($(cut -f2 /tmp/lsdiff.lst))
}

git_filediff () { 
    [ $# -ne 1 ] && return 1
    local LSDIFF=/tmp/lsdiff.lst
    local f=$1
    local h=$hr
    git diff -w $h^:$f $h:$f
}

git_log () { 
    git log --pretty=format:"%h%x09%ad%x09%an%x09%s" --date=format:'%Y-%m-%d %H:%M:%S' | tee /tmp/git.log | less
}
